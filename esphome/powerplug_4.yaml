# waterbed
substitutions:
  plug_name: powerplug_4
esphome:
  name: ${plug_name}
  platform: ESP8266
  board: esp8285

# WiFi connection
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_pwd
  power_save_mode: none
#  manual_ip:
#    static_ip: 192.168.178.88
#    gateway: 192.168.178.1
#    subnet: 255.255.255.0
#    dns1: 8.8.8.8
#    dns2: 1.1.1.1

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: !secret esp_ha_api_ww
  reboot_timeout: 0s
ota:
  password: !secret esp_ha_api_ww
# Enable Web server
web_server:
  port: 80

# Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time

# Text sensors with general information
text_sensor:
  - platform: version
    name: version
  - platform: wifi_info
    ip_address:
      name: ${plug_name}_ip
    ssid:
      name: ${plug_name}_ssid
    bssid:
      name: ${plug_name}_bssid

sensor:
  # Uptime sensor
  - platform: uptime
    name: "${plug_name}_uptime"
  # WiFi Signal sensor
  - platform: wifi_signal
    name: "${plug_name}_wifi_signal"
    update_interval: 15s
  # Power sensor
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO04
    cf1_pin: GPIO05
    change_mode_every: 3
    update_interval: 5s
    # Current sensor
    current:
      name: "${plug_name}_current"
      unit_of_measurement: A
      accuracy_decimals: 2
      filters:
      # Map from sensor -> measured value
        - calibrate_linear:
          - 0.06 -> 0.14
          - 4.11 -> 6.18
          - 4.12 -> 6.20
          - 4.14 -> 6.23
    # Make everything below 0.01A appear as just 0A.
    # Furthermore it corrects 0.013A for the power usage of the plug.
        - lambda: if (x < (0.01 + 0.013)) return 0; else return (x - 0.013);
    # Voltage sensor
    voltage:
      name: "${plug_name}_auto_voltage"
      unit_of_measurement: V
      accuracy_decimals: 0
      filters:
       # Map from sensor -> measured value
        - calibrate_linear:
          - 0.0 -> 0.0
          - 713 -> 233
          - 715 -> 234
   # Power sensor
    power:
      id: power
      name: "${plug_name}_power"
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
      # Map from sensor -> measured value
        - calibrate_linear:
          - 32.31 -> 11.88
          - 38.50 -> 12.30
          - 5390 -> 1444
          - 5371 -> 1440
          - 5339 -> 1438
    # Make everything below 2W appear as just 0W.
    # Furthermore it corrects 1.14W for the power usage of the plug.
        - lambda: if (x < (2 + 0.78)) return 0; else return (x - 0.78);
  # Total daily energy sensor
  - platform: total_daily_energy
    name: "energy_${plug_name}_daily"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    name: "${plug_name}_button"
    pin:
      number: GPIO3
      inverted: true
    on_press:
      - switch.toggle: relay

switch:
  # Switch to restart the plug
  - platform: restart
    name: "${plug_name}_restart"
  # Switch to toggle the relay
  - platform: gpio
    id: relay
    name: "${plug_name}_switch"
    pin: GPIO14
    on_turn_on:
      - light.turn_on: led
    on_turn_off:
      - light.turn_off: led
    restore_mode: ALWAYS_ON
output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO1
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    output: state_led
    id: led

# Uses the red LED as a status indicator
status_led:
  pin:
    number: GPIO13
    inverted: true    